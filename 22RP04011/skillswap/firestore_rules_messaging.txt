rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }
    
    function isValidMessage() {
      return request.resource.data.keys().hasAll(['senderId', 'receiverId', 'content', 'type', 'status', 'timestamp']) &&
             request.resource.data.senderId is string &&
             request.resource.data.receiverId is string &&
             request.resource.data.content is string &&
             request.resource.data.content.size() > 0 &&
             request.resource.data.content.size() <= 1000 &&
             request.resource.data.type in ['text', 'image', 'file', 'sessionRequest'] &&
             request.resource.data.status in ['sent', 'delivered', 'read', 'failed'] &&
             request.resource.data.timestamp is timestamp;
    }
    
    function isValidConversation() {
      return request.resource.data.keys().hasAll(['participants', 'lastMessageId', 'lastMessageContent', 'lastMessageSenderId', 'lastMessageTime', 'participantUnreadCounts', 'isActive', 'createdAt', 'updatedAt']) &&
             request.resource.data.participants is list &&
             request.resource.data.participants.size() == 2 &&
             request.resource.data.participants.hasAll([request.auth.uid]) &&
             request.resource.data.lastMessageId is string &&
             request.resource.data.lastMessageContent is string &&
             request.resource.data.lastMessageSenderId is string &&
             request.resource.data.lastMessageTime is timestamp &&
             request.resource.data.participantUnreadCounts is map &&
             request.resource.data.isActive is bool &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId && 
        isValidMessage();
      
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.senderId && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
        request.resource.data.status in ['delivered', 'read', 'failed'];
      
      allow delete: if false; // Messages cannot be deleted
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        isParticipant(resource.data.participants);
      
      allow create: if isAuthenticated() && 
        isValidConversation();
      
      allow update: if isAuthenticated() && 
        isParticipant(resource.data.participants) &&
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['lastMessageId', 'lastMessageContent', 'lastMessageSenderId', 'lastMessageTime', 'participantUnreadCounts', 'isActive', 'updatedAt']);
      
      allow delete: if false; // Conversations are soft deleted by setting isActive to false
    }

    // Typing indicators collection
    match /typing/{typingId} {
      allow read: if isAuthenticated() && 
        (typingId.matches(request.auth.uid + '_.*') || typingId.matches('.*_' + request.auth.uid));
      
      allow create, update: if isAuthenticated() && 
        typingId.matches(request.auth.uid + '_.*') &&
        request.resource.data.keys().hasAll(['isTyping', 'userId', 'timestamp']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.isTyping is bool &&
        request.resource.data.timestamp is timestamp;
      
      allow delete: if isAuthenticated() && 
        typingId.matches(request.auth.uid + '_.*');
    }

    // Users collection (existing rules)
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Notifications collection (existing rules)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId;
      
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Sessions collection (existing rules)
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.hostId;
      
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.hostId;
    }

    // Session requests collection (existing rules)
    match /sessionRequests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.hostId || request.auth.uid == resource.data.guestId);
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.guestId;
      
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.hostId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'responseMessage']);
      
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.hostId || request.auth.uid == resource.data.guestId);
    }

    // Skills collection (existing rules)
    match /skills/{skillId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }

    // Skill requests collection (existing rules)
    match /skillRequests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.skillOwnerId);
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.requesterId;
      
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.skillOwnerId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'responseMessage']);
      
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.skillOwnerId);
    }
  }
} 