rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a session participant
    function isSessionParticipant(sessionData) {
      return isAuthenticated() && (
        (sessionData.participants != null && request.auth.uid in sessionData.participants) ||
        sessionData.userA == request.auth.uid ||
        sessionData.userB == request.auth.uid ||
        sessionData.hostId == request.auth.uid
      );
    }
    
    // Helper function to check if user is a message participant
    function isMessageParticipant(messageData) {
      return isAuthenticated() && (
        messageData.senderId == request.auth.uid ||
        messageData.receiverId == request.auth.uid
      );
    }

    // Helper function to check if user is in conversation participants
    function isConversationParticipant(conversationData) {
      return isAuthenticated() && 
        request.auth.uid in conversationData.participants;
    }

    // Users: can read any, write only their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Skills: can read any, write only their own
    match /skills/{skillId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Sessions: can read/write if participant or userA/userB/hostId
    match /sessions/{sessionId} {
      allow read: if isSessionParticipant(resource.data);
      allow create: if isAuthenticated() && (
        (request.resource.data.participants != null && request.auth.uid in request.resource.data.participants) ||
        request.resource.data.userA == request.auth.uid ||
        request.resource.data.userB == request.auth.uid ||
        request.resource.data.hostId == request.auth.uid
      );
      allow update: if isSessionParticipant(resource.data);
      allow delete: if isAuthenticated() && (
        resource.data.userA == request.auth.uid ||
        resource.data.userB == request.auth.uid ||
        resource.data.hostId == request.auth.uid
      );
    }
    
    // Notifications: can read only their own, but any authenticated user can write
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Messages: can read/write if sender or receiver
    match /messages/{messageId} {
      allow read: if isMessageParticipant(resource.data);
      allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid;
      allow update: if isMessageParticipant(resource.data);
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }
    
    // Chat threads: allow read/write if user is a participant (for hybrid chat system)
    match /chatThreads/{chatId} {
      allow read, update, delete: if isAuthenticated() && (
        resource.data.user1Id == request.auth.uid ||
        resource.data.user2Id == request.auth.uid
      );
      allow create: if isAuthenticated() && (
        request.resource.data.user1Id == request.auth.uid ||
        request.resource.data.user2Id == request.auth.uid
      );
    }

    // Chats: allow read/write if user is a participant (for chat messages, hybrid mode, reactions, pinning)
    match /chats/{chatId} {
      allow read, update, delete: if isAuthenticated() && (
        chatId.matches('.*' + request.auth.uid + '.*')
      );
      allow create: if isAuthenticated();
      match /messages/{messageId} {
        allow read: if request.auth != null && chatId.matches('.*' + request.auth.uid + '.*');
        allow write: if request.auth != null && chatId.matches('.*' + request.auth.uid + '.*') && (request.resource.data.senderId == request.auth.uid || request.resource.data.receiverId == request.auth.uid);
      }
    }
    
    // Conversations: can read/write if participant
    match /conversations/{conversationId} {
      allow read: if isConversationParticipant(resource.data);
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isConversationParticipant(resource.data);
    }
    
    // Typing indicators: can read if authenticated, write only own status
    match /typing/{typingId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Session requests: can read/write if requester or host
    match /sessionRequests/{requestId} {
      allow read: if isAuthenticated() && (resource.data.requesterId == request.auth.uid || resource.data.hostId == request.auth.uid);
      allow create: if isAuthenticated() && (request.resource.data.requesterId == request.auth.uid || request.resource.data.hostId == request.auth.uid);
      allow update: if isAuthenticated() && (resource.data.requesterId == request.auth.uid || resource.data.hostId == request.auth.uid);
      allow delete: if isAuthenticated() && (resource.data.requesterId == request.auth.uid || resource.data.hostId == request.auth.uid);
    }
    
    // Skill requests: can read any, write only own requests
    match /skillRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.requesterId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.requesterId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.requesterId == request.auth.uid;
    }
    
    // User sessions: can read/write if owner or participant
    match /userSessions/{sessionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || (resource.data.participants != null && request.auth.uid in resource.data.participants));
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || (resource.data.participants != null && request.auth.uid in resource.data.participants));
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // User skills: can read/write only own skills
    match /userSkills/{skillId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // User notifications: can read/write only own notifications
    match /userNotifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // User messages: can read/write if sender or receiver
    match /userMessages/{messageId} {
      allow read: if isMessageParticipant(resource.data);
      allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid;
      allow update: if isMessageParticipant(resource.data);
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }
    
    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 